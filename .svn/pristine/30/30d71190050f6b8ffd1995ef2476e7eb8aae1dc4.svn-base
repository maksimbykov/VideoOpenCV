#include "FITreader2PNG.h"
#include "fitsio.h"


using namespace cv;
using namespace std;

void FITreader2PNG::writePNG (std::string path_to_file)
{
	fitsfile *fptr;       /* pointer to the FITS file, defined in fitsio.h */
    int status,  nfound, anynull;
    long naxes[2], fpixel, nbuffer, npixels, ii;

#define buffsize 1000
    float datamin, datamax, nullval, buffer[buffsize];
    //char filename[]  = "C:\\Users\\Max\\Desktop\\savanevych\\fits_time\\fr1v2.fit";     /* name of existing FITS file   */

	std::string filename (path_to_file.c_str());
	filename += "out.fts";
    status = 0;

    if ( fits_open_file(&fptr, filename.c_str(), READONLY, &status) )
	{};

    /* read the NAXIS1 and NAXIS2 keyword to get image size */
    if ( fits_read_keys_lng(fptr, "NAXIS", 1, 2, naxes, &nfound, &status) )
		{/*printerror( status );*/};

    npixels  = naxes[0] * naxes[1];         /* number of pixels in the image */
    fpixel   = 1;
    nullval  = 0;                /* don't check for null values in the image */
    datamin  = 1.0E30f;
    datamax  = -1.0E30f;



	unsigned char * img = new unsigned char [npixels];
	if ( fits_read_img(fptr, TBYTE, fpixel, npixels, &nullval,
              img, &anynull, &status) )
	{};


	cv::Mat im(naxes[1],naxes[0], CV_8U, img);

	if ( fits_close_file(fptr, &status) )
		{/* printerror( status )*/};
	
	vector<int> compression_params;
    compression_params.push_back(IMWRITE_PNG_COMPRESSION);
    compression_params.push_back(9);
	filename += ".png";

	bool result = imwrite(filename.c_str(),im,compression_params);
	delete img;
    return;

}

